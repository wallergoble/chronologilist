import { pipe, prop } from 'ramda'
import { getToken, getTokenType } from './localStorage'
import { redirectToSpotifyOauth } from './spotifyCredentials'

// TODO: make url ENV
const URL = 'https://api.spotify.com/v1'

// ENDPOINT SHOULD START WITH /
export function api<ResponseType>(
  endpoint: string,
  { body, method, ...customConfig }: any = {},
): Promise<ResponseType> {
  console.log(endpoint)
  let token = getToken()
  let tokenType = getTokenType() || 'Bearer'

  let headers: any = { 'content-type': 'application/json' }

  if (token) {
    headers.Authorization = `${tokenType} ${token}`
  }

  let config = {
    ...customConfig,
    body: body ? JSON.stringify(body) : undefined,
    headers: {
      ...headers,
      ...customConfig.headers,
    },
    method: method || body ? 'POST' : 'GET',
  }

  return window.fetch(`${URL}${endpoint}`, config).then(response => {
    if (response.status === 401) {
      redirectToSpotifyOauth()
    }
    // if (!response.ok) {
    //   throw new Error(JSON.stringify(response));
    // }

    return response.json() as Promise<ResponseType>
  })
}

export function searchForArtists(
  term: string,
): Promise<SpotifyApi.ArtistObjectFull[]> {
  term = encodeURIComponent(term)

  return api<SpotifyApi.ArtistSearchResponse>(
    `/search?q=${term}&type=artist`,
  ).then(
    pipe(
      prop('artists'),
      prop('items'),
    ),
  )
}

export type Group = 'album' | 'single' | 'appears_on' | 'compilation'

export function getAlbumsByArtistId(id: string, ...includeGroups: Group[]) {
  let includeGroupsBlock =
    includeGroups.length > 0 ? `?include_groups=${includeGroups.join(',')}` : ''

  let limitBlock = includeGroupsBlock ? '&limit=50' : '?limit=50'

  return api<SpotifyApi.PagingObject<SpotifyApi.AlbumObjectFull>>(
    `/artists/${id}/albums${includeGroupsBlock}${limitBlock}`,
  ).then(prop('items'))
}

let DEFAULT_DESCRIPTION = `A playlist automatically generated by ${
  window.location.origin
}`

export function createPlaylist(
  userId: string,
  name = `A cool playlist ${Date.now()}`,
  isPublic = true,
  description = DEFAULT_DESCRIPTION,
) {
  return api<SpotifyApi.CreatePlaylistResponse>(`/users/${userId}/playlists`, {
    body: {
      description,
      name,
      public: isPublic,
    },
  }).then(prop('id'))
}

export function addTracksToPlaylist(playlistId: string, ...trackIds: string[]) {
  return api<SpotifyApi.AddTracksToPlaylistResponse>(
    `/playlists/${playlistId}/tracks`,
    { body: trackIds.flat() },
  )
}
export function getTracks(albumId: string) {
  return api<SpotifyApi.AlbumTracksResponse>(`/albums/${albumId}/tracks`).then(
    prop('items'),
  )
}
